---
# title: "**Análise de um Portfólio**"
author: "Alexssandro da Silva Oliveira"
date: "`r format(Sys.Date())`"
lang: pt
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(
  echo = TRUE,
  warning = FALSE,
  message = FALSE,
  fig.width = 10,
  fig.height = 6
)
```

<br>

::: {style="border-top: 2px solid #A52A2A;"}
:::

<br>

### Bibliotecas utilizadas neste trabalho

```{r}
## Parte 1: Carregando algoritimos auxiliares
source("pacotes.R")

if (!requireNamespace("mixOmics", quietly = TRUE)) {
  if (!requireNamespace("BiocManager", quietly = TRUE)) {
    install.packages("BiocManager")
  }
  BiocManager::install("mixOmics", ask = FALSE, version = "3.18")
}

source("funcoes.R")


################################################################################
#| ANÁLISE - LEITURA DOS BANCO DE DADOS 
################################################################################

# Define a semente para garantir que os resultados da análise sejam sempre os mesmos
set.seed(03102003)

# Banco de dados - Dados ordenados B3
url <- "https://docs.google.com/spreadsheets/d/1W1n8lbdkidFlFZ-3H6Hh_rAOI6RhwxbbnmhmI77_3JM/edit?gid=1032230043#gid=1032230043"

# --- Leitura dos dados ---
dados <- data.frame(gsheet::gsheet2tbl(url))
```

------------------------------------------------------------------------

### Funções utilizadas neste trabalho

```{r}
# --- FUNÇÃO-BASE: Amostrador de Gibbs (Com modo silencioso) ---
run_gibbs_sampler <- function(x, B = 5000, burn_in = 2000, verbose = FALSE) { # verbose = FALSE por padrão
  x <- as.matrix(x)
  n <- nrow(x); p <- ncol(x)
  m0 <- rep(0, p); lambda <- 0.01; nu0 <- p + 2; S0 <- diag(p) * 0.01; r0 <- 1
  mu <- colMeans(x, na.rm = TRUE); Phi <- diag(p)
  z <- rep(1, n); nu_seq <- seq(1, 40, 0.5); nu <- 5
  n_amostras_finais <- B - burn_in
  Phi_amostras <- array(NA, dim = c(p, p, n_amostras_finais))
  
  if (verbose) {
    cat(paste("\nIniciando amostrador de Gibbs para", p, "ativos...\n"))
    pb <- txtProgressBar(min = 0, max = B, style = 3)
  }
  
  for (i in 1:B) {
    sum_z_x <- colSums(x * z, na.rm = TRUE)
    Phi_mu_post <- (sum(z) + lambda) * Phi
    Sigma_mu_post <- solve(Phi_mu_post)
    mu_mean_post <- Sigma_mu_post %*% (sum_z_x + lambda * m0)
    mu <- mvrnorm(1, mu_mean_post, Sigma_mu_post)
    residuos <- x - matrix(mu, nrow = n, ncol = p, byrow = TRUE)
    S_res_z <- t(residuos) %*% diag(z) %*% residuos
    S_mu_prior <- lambda * (mu - m0) %*% t(mu - m0)
    Sn_post <- S0 + S_mu_prior + S_res_z
    Phi <- rWishart(1, nu0 + n, solve(Sn_post))[, , 1]
    alfa_z_post <- (nu + p) / 2
    dist_mahalanobis <- rowSums((residuos %*% Phi) * residuos)
    beta_z_post <- (nu + dist_mahalanobis) / 2
    z <- rgamma(n, shape = alfa_z_post, rate = beta_z_post)
    log_veross_nu <- (0.5 * n * nu_seq * log(nu_seq / 2)) - (n * lgamma(nu_seq / 2)) + 
                     (nu_seq / 2 - 1) * sum(log(z + 1e-9)) - (nu_seq / 2) * sum(z) - 
                     (r0 * nu_seq)
    prob_nu <- exp(log_veross_nu - max(log_veross_nu, na.rm = TRUE))
    if(any(is.na(prob_nu)) || sum(prob_nu, na.rm=TRUE) == 0) {
      nu <- nu
    } else {
      nu <- sample(nu_seq, 1, prob = prob_nu)
    }
    if (i > burn_in) {
      Phi_amostras[, , i - burn_in] <- Phi
    }
    if (verbose) setTxtProgressBar(pb, i)
  }
  
  if (verbose) {
    close(pb)
    cat("\nAmostragem concluída.\n")
  }
  
  return(Phi_amostras)
}
```

------------------------------------------------------------------------

### Leitura dos dados

```{r}
################################################################################
#| TRATANDO OS DADOS 
################################################################################


dados_limpos <- dados %>%
  dplyr::select(data_referencia, cod_negociacao, Setor, preco_ult) %>%
  mutate(preco_ult = as.numeric(preco_ult), data_referencia = as.Date(data_referencia)) %>%
  filter(!is.na(Setor) & Setor != "" & !is.na(preco_ult) & preco_ult > 0) %>%
  group_by(data_referencia, cod_negociacao, Setor) %>%
  summarise(preco_ult = mean(preco_ult, na.rm = TRUE), .groups = 'drop')
precos_wide <- dados_limpos %>%
  pivot_wider(names_from = cod_negociacao, values_from = preco_ult, id_cols = data_referencia) %>%
  arrange(data_referencia)
precos_preenchidos <- zoo::na.locf(precos_wide, na.rm = FALSE)
precos_preenchidos <- zoo::na.locf(precos_preenchidos, fromLast = TRUE)
log_retornos_matriz <- apply(precos_preenchidos[, -1], 2, function(p) diff(log(p)))
log_retornos_matriz[is.infinite(log_retornos_matriz)] <- NA 

# --- Lista para armazenar todos os resultados ---
resultados_finais <- list()

```

------------------------------------------------------------------------

### Volatilidade do Portfólio Ótimo por Setor

```{r}
#=======================================================================
# 1. Para cada setor, calcule a volatilidade do portifólio ótimo.
#=======================================================================
map_ticker_setor <- unique(dados_limpos[, c("cod_negociacao", "Setor")])
setores <- unique(map_ticker_setor$Setor)

for (setor_atual in setores) {
  tickers_do_setor <- filter(map_ticker_setor, Setor == setor_atual)$cod_negociacao
  tickers_presentes <- intersect(tickers_do_setor, colnames(log_retornos_matriz))
  retornos_analise <- log_retornos_matriz[, tickers_presentes, drop = FALSE]
  retornos_analise <- na.omit(retornos_analise)
  
  if (nrow(retornos_analise) < 100 || ncol(retornos_analise) < 2) {
    next
  }
  
  # AQUI ESTÁ A MUDANÇA: chamando a função em modo silencioso
  amostras_Phi <- run_gibbs_sampler(retornos_analise, verbose = FALSE)
  
  volatilidades <- apply(amostras_Phi, 3, function(phi) sqrt(1 / (t(rep(1,nrow(phi))) %*% phi %*% rep(1,nrow(phi)))))
  
  resultados_finais[[setor_atual]] <- list(
    volatilidade_media = mean(na.omit(volatilidades)),
    ativos = colnames(retornos_analise)
  )
}
# APRESENTAÇÃO IMEDIATA DOS RESULTADOS DESTA ETAPA
df_setorial <- data.frame(
  Portfolio = names(resultados_finais),
  N_Ativos = sapply(resultados_finais, function(x) length(x$ativos)),
  vol_diaria_pct = sapply(resultados_finais, function(x) x$volatilidade_media * 100),
  Ativos_no_Setor = sapply(resultados_finais, function(x) paste(x$ativos, collapse = ", "))
) %>%
  arrange(vol_diaria_pct) %>%
  rename(
    `Portfólio` = Portfolio,
    `Nº de Ativos` = N_Ativos,
    `Volatilidade Diária (%)` = vol_diaria_pct,
    `Ativos Analisados` = Ativos_no_Setor
  )


# df_setorial %>%
#   kbl(caption = "Volatilidade Diária por Setor e Ativos Inclusos") %>%
#   kable_classic(full_width = F, html_font = "Cambria")

# Imprima a tabela com melhorias visuais
df_setorial %>%
  knitr::kable(digits = 3, caption = "Volatilidade Diária por Setor e Ativos Inclusos", format = "html") %>%
  kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive"), full_width = F, position = "center") %>%
  scroll_box(width = "100%", height = "400px")

```

------------------------------------------------------------------------

### Volatilidade do Portfólio Ótimo Global e Grafo de dependências condicionais mediante todos os setores

```{r}
#=======================================================================
# 2. Calcule a volatilidade do portifólio ótimo utilizando todos os setores.
# 3. Ainda utilizando todos os setores, faça um grafo de dependências condicionais
#=======================================================================
retornos_gerais <- na.omit(log_retornos_matriz)

# Chamando a função em modo silencioso
amostras_Phi_geral <- run_gibbs_sampler(retornos_gerais, verbose = FALSE)

volatilidades_geral <- apply(amostras_Phi_geral, 3, function(phi) sqrt(1 / (t(rep(1,nrow(phi))) %*% phi %*% rep(1,nrow(phi)))))
resultados_finais[["Mercado Completo"]] <- list(
  amostras_Phi = amostras_Phi_geral,
  volatilidade_media = mean(na.omit(volatilidades_geral)),
  ativos = colnames(retornos_gerais)
)

# --- APRESENTAÇÃO DA TABELA DE VOLATILIDADE GLOBAL (ADICIONADO) ---
tabela_vol_geral <- data.frame(
  `Portfólio` = "Mercado Completo (Benchmark)",
  `Volatilidade Diária (%)` = resultados_finais[["Mercado Completo"]]$volatilidade_media * 100,
  `Volatilidade Anualizada (%)` = resultados_finais[["Mercado Completo"]]$volatilidade_media * sqrt(252) * 100,
  check.names = FALSE
)
print(
  knitr::kable(tabela_vol_geral, digits = 3, caption = "Volatilidade do Portfólio Ótimo Global")
)
# --- FIM DA APRESENTAÇÃO DA TABELA ---


# # --- CÓDIGO PARA O GRAFO  ---
# p <- dim(amostras_Phi_geral)[1]
# adj_matrix <- matrix(0, p, p)
# pcorr_mean_matrix <- matrix(0, p, p)
# for(i in 1:(p-1)) {
#   for(j in (i+1):p) {
#     pcorr_samples <- -amostras_Phi_geral[i,j,] / sqrt(amostras_Phi_geral[i,i,] * amostras_Phi_geral[j,j,])
#     cred_interval <- quantile(pcorr_samples, c(0.025, 0.975))
#     if (!(cred_interval[1] < 0 && cred_interval[2] > 0)) { adj_matrix[i,j] <- adj_matrix[j,i] <- 1 }
#     pcorr_mean_matrix[i,j] <- pcorr_mean_matrix[j,i] <- mean(pcorr_samples)
#   }
# }
# ativos_mercado <- resultados_finais[["Mercado Completo"]]$ativos
# colnames(pcorr_mean_matrix) <- rownames(pcorr_mean_matrix) <- ativos_mercado
# ordered_map <- data.frame(Acao = ativos_mercado) %>%
#   left_join(map_ticker_setor, by = c("Acao" = "cod_negociacao"))
# ordered_map$Setor[is.na(ordered_map$Setor)] <- "Desconhecido"
# 
# plot_matrix <- pcorr_mean_matrix * adj_matrix
# 
# qgraph::qgraph(plot_matrix,
#                layout = "spring", 
#                labels = ativos_mercado,
#                groups = as.factor(ordered_map$Setor), legend = TRUE, legend.cex = 0.6,
#                vsize = 6, esize = 10, theme = "colorblind",
#                title = "Grafo de Dependências Condicionais do Portfólio Geral")


# --- CÓDIGO PARA O GRAFO PERSONALIZADO ---

p <- dim(amostras_Phi_geral)[1]
adj_matrix <- matrix(0, p, p)
pcorr_mean_matrix <- matrix(0, p, p)
for(i in 1:(p-1)) {
  for(j in (i+1):p) {
    pcorr_samples <- -amostras_Phi_geral[i,j,] / sqrt(amostras_Phi_geral[i,i,] * amostras_Phi_geral[j,j,])
    cred_interval <- quantile(pcorr_samples, c(0.025, 0.975))
    if (!(cred_interval[1] < 0 && cred_interval[2] > 0)) { adj_matrix[i,j] <- adj_matrix[j,i] <- 1 }
    pcorr_mean_matrix[i,j] <- pcorr_mean_matrix[j,i] <- mean(pcorr_samples)
  }
}
ativos_mercado <- resultados_finais[["Mercado Completo"]]$ativos
colnames(pcorr_mean_matrix) <- rownames(pcorr_mean_matrix) <- ativos_mercado
ordered_map <- data.frame(Acao = ativos_mercado) %>%
  left_join(map_ticker_setor, by = c("Acao" = "cod_negociacao"))
ordered_map$Setor[is.na(ordered_map$Setor)] <- "Desconhecido"

plot_matrix <- pcorr_mean_matrix * adj_matrix

# 1. Crie sua paleta de cores para os setores
paleta_setores <- c("orange", "skyblue", "limegreen", "gold", "tomato", 
                    "darkorchid", "hotpink", "saddlebrown", "grey50", "darkcyan", "khaki")

# Garante que a paleta tenha o número certo de cores, repetindo se necessário
n_grupos <- nlevels(as.factor(ordered_map$Setor))
cores_finais <- rep_len(paleta_setores, n_grupos)


# 2. A chamada ao qgraph com as cores personalizadas
qgraph::qgraph(plot_matrix,
               layout = "spring", 
               labels = ativos_mercado,
               groups = as.factor(ordered_map$Setor), 
               legend = TRUE, legend.cex = 0.6,
               vsize = 6, esize = 10, 
               title = "Grafo de Dependências Condicionais do Portfólio Geral",
               
               # Argumentos de Cor
               color = cores_finais, # Usa a paleta para os nós/setores
               posCol = "forestgreen", # Conexões positivas
               negCol = "darkred"      # Conexões negativas
              )
```

------------------------------------------------------------------------

### Portfólio do Alexssandro e Comparação de Volatilidades

```{r}

#=======================================================================
# 4. Construa e Apresente o Portfólio Personalizado
#=======================================================================

# Seleciona as 3 ações com base na análise do grafo
avg_pcorr <- rowMeans(abs(pcorr_mean_matrix) - diag(p))
acoes_isoladas <- data.frame(Acao = ativos_mercado, AvgPCorr = avg_pcorr) %>%
    dplyr::arrange(AvgPCorr)
acoes_personalizado <- head(acoes_isoladas$Acao, 3)

# Calcula a volatilidade para este portfólio específico
retornos_personalizado <- log_retornos_matriz[, acoes_personalizado, drop = FALSE]

# CORREÇÃO 1: Adicionado verbose = FALSE para rodar em modo silencioso
amostras_Phi_pers <- run_gibbs_sampler(na.omit(retornos_personalizado), verbose = FALSE)

volatilidades_pers <- apply(amostras_Phi_pers, 3, function(phi) sqrt(1 / (t(rep(1,nrow(phi))) %*% phi %*% rep(1,nrow(phi)))))
resultados_finais[["Personalizado"]] <- list(
    volatilidade_media = mean(na.omit(volatilidades_pers)),
    ativos = acoes_personalizado
)

# --- APRESENTAÇÃO IMEDIATA E COMPLETA DO PORTFÓLIO PERSONALIZADO ---

# Tabela 1: Composição do Portfólio
composicao_personalizada <- data.frame(Acao = acoes_personalizado) %>%
  left_join(map_ticker_setor, by = c("Acao" = "cod_negociacao"))
print(knitr::kable(composicao_personalizada, caption = "Ações Selecionadas para o Portfólio Personalizado"))

# CORREÇÃO 2: Tabela com a volatilidade específica deste portfólio
tabela_vol_personalizada <- data.frame(
    `Portfólio` = "Personalizado",
    `Volatilidade Diária (%)` = resultados_finais[["Personalizado"]]$volatilidade_media * 100,
    `Volatilidade Anualizada (%)` = resultados_finais[["Personalizado"]]$volatilidade_media * sqrt(252) * 100,
    check.names = FALSE
)
print(knitr::kable(tabela_vol_personalizada, digits = 3, caption = "Volatilidade Calculada para o Portfólio Personalizado"))


#=======================================================================
# 5. Apresente a Tabela de Comparação Final
#=======================================================================

# Este código agora apenas monta a tabela final com todos os resultados já calculados
df_final <- data.frame(
  Portfolio = names(resultados_finais),
  vol_diaria_pct = sapply(resultados_finais, function(x) x$volatilidade_media * 100),
  vol_anual_pct = sapply(resultados_finais, function(x) x$volatilidade_media * sqrt(252) * 100)
) %>%
  arrange(vol_diaria_pct) %>%
  rename(
    `Portfólio` = Portfolio,
    `Volatilidade Diária (%)` = vol_diaria_pct,
    `Volatilidade Anualizada (%)` = vol_anual_pct
  )

df_final$Portfólio[df_final$Portfólio == "Mercado Completo"] <- "Mercado Completo (Benchmark)"

print(
  knitr::kable(df_final, digits = 3, caption = "Ranking Final de Volatilidade por Portfólio")
)

```

Nossa análise de portfólio, usando o modelo Bayesiano t-Student, deixou clara a importância da diversificação para diminuir riscos. A descoberta principal foi que o portfólio global, com todos os ativos juntos, foi o mais seguro de todos, superando com folga qualquer estratégia focada em um único setor. Além disso, os resultados confirmaram o que se espera na prática: setores mais estáveis, como o de Utilidade Pública, mostraram menor risco, enquanto setores como Consumo Cíclico e Tecnologia se provaram mais voláteis. O mais interessante foi ver que nosso portfólio personalizado, com apenas três ações escolhidas por terem pouca conexão entre si, alcançou um risco muito competitivo, mostrando que uma boa estratégia de diversificação, mesmo que simples, traz ótimos resultados

<br>

::: {style="border-top: 2px solid #A52A2A;"}
:::

<br>
